#!/bin/bash
# Automate the retrieval of data for multiple Pokémon and store it in separate files.

pokemon_url="https://pokeapi.co/api/v2/pokemon/"
mkdir -p pokemon_data
error_log="errors.txt"

# capture data from pokmon url
pokemon_data=$(curl -s --fail "$pokemon_url")

# Check for errors in the curl command
if [ $? -ne 0 ]; then
    echo "Error fetching data from $pokemon_url" >> "$error_log"
    exit 1
fi

name_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# loop through and retrieve url for the names on the list
for name in "${name_list[@]}";
do
    # Process each name and fetch its data
    pokeman_name=$(echo "$pokemon_data" | jq -r --arg name "$name" '.results[] | select(.name == $name)')
    
    if [ -z "$pokeman_name" ]; then
        echo "No data found for $name" >> "$error_log"
        continue
    fi

    # Retry mechanism for fetching data
    success=false
    for attempt in {1..3}; do
        echo "Fetching data for $name..."
        pokemon_url=$(echo "$pokemon_data" | jq -r --arg name "$name" '.results[] | select(.name == $name) | .url')
        
        # Process each url and store in a separate file
        if [ -n "$pokemon_url" ] && [ $? -eq 0 ]; then
            url_data=$(curl -s --fail "$pokemon_url")

            if [ $? -ne 0 ]; then
                echo "Error fetching data for $name from $pokemon_url" >> "$error_log"
                continue
            fi

            echo "$url_data" > "pokemon_data/${name}.json"
            echo "Saved data to pokemon_data/${name}.json ✅"
            success=true
            break # Exit retry loop on success
        else
            echo "No data found for $name" >> "$error_log"
            sleep 1
        fi
    done

    if [ "$success" = false ]; then
        echo "Failed to fetch data for $name after multiple attempts." >> "$error_log"
    fi
    sleep 1 # Sleep to avoid hitting API rate limits     
    
done
